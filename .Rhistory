as.vector(c(antioquia_mean_age[2]))[,1]
as.vector(c(antioquia_mean_age[2]))[1,]
as.vector(c(antioquia_mean_age[2]))[0]
unlist(c(antioquia_mean_age[2]))[0]
unlist(c(antioquia_mean_age[2]))
unlist(c(antioquia_mean_age[2]))[1]
unlist(c(antioquia_mean_age[2]))[,1]
unlist(c(antioquia_mean_age[2]))[0]
unlist(c(antioquia_mean_age[2]))
unname(unlist(c(antioquia_mean_age[2])))
data[which(data$dep_id==1),]$age<-unname(unlist(c(antioquia_mean_age[2])))
data[which(data$dep_id==2),]$age<-unname(unlist(c(bogota_mean_age[2])))
data[which(data$dep_id==3),]$age<-unname(unlist(c(cundinamarca_mean_age[2])))
data[which(data$dep_id==4),]$age<-unname(unlist(c(risaralda_mean_age[2])))
data[which(data$dep_id==5),]$age<-unname(unlist(c(valle_cauca_mean_age[2])))
data
data[which(data$dep_id==2),]$age<-unname(unlist(c(bogota_mean_age[2])))
bogota_mean_age<-cc[which(cc$`Departamento o Distrito`=="Bogotá D.C."),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
bogota_mean_age
data
cc
cc<-read_csv("data/colombia_covid.csv")
cc
tail(cc)
central.colombia.dep<-c("Bogotá D.C.", "Cundinamarca",  "Valle del Cauca", "Risaralda", "Antioquia")
central.colombia.rows<-which(cc$`Departamento o Distrito` %in% central.colombia.dep)
cc<-cc[central.colombia.rows,]
cc
bogota_mean_age<-cc[which(cc$`Departamento o Distrito`=="Bogotá D.C."),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
bogota_mean_age
cundinamarca_mean_age<-cc[which(cc$`Departamento o Distrito`=="Cundinamarca"),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
valle_cauca_mean_age<-cc[which(cc$`Departamento o Distrito`=="Valle del Cauca"),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
risaralda_mean_age<-cc[which(cc$`Departamento o Distrito`=="Risaralda"),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
antioquia_mean_age<-cc[which(cc$`Departamento o Distrito`=="Antioquia"),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
data$age<-rep(0,nrow(data))
data[which(data$dep_id==1),]$age<-unname(unlist(c(antioquia_mean_age[2])))
data[which(data$dep_id==2),]$age<-unname(unlist(c(bogota_mean_age[2])))
data[which(data$dep_id==3),]$age<-unname(unlist(c(cundinamarca_mean_age[2])))
data[which(data$dep_id==4),]$age<-unname(unlist(c(risaralda_mean_age[2])))
data[which(data$dep_id==5),]$age<-unname(unlist(c(valle_cauca_mean_age[2])))
data
data$sex<-rep(0, nrow(data))
model2.NB<-stan_model("stan/NB_model2.stan")
model2.NB<-stan_model("stan/NB_model2.stan")
model2.NB<-stan_model("stan/NB_model2.stan")
model2.NB<-stan_model("stan/NB_model2.stan")
model2.NB<-stan_model("stan/NB_model2.stan")
#arrange things
model.data2<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time,
age = data$age,
log_people = log(data$people),
D = 5,
dep = data$dep_id,
id = data$dep_id
)
#fit
fit.model2.NB<-sampling(model2.NB, model.data2)
#arrange things
model.data2<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time,
age = data$age,
log_people = log(data$people/1e4),
D = 5,
dep = data$dep_id,
id = data$dep_id
)
#fit
fit.model2.NB<-sampling(model2.NB, model.data2)
log(data$people/1e4)
log(data$people)
data$people
data$people*10^6
log(data$people*10^6)
#arrange things
model.data2<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time,
age = data$age,
log_people = log(data$people*10^6),
D = 5,
dep = data$dep_id,
id = data$dep_id
)
#fit
fit.model2.NB<-sampling(model2.NB, model.data2)
#fit
fit.model2.NB<-sampling(model2.NB, model.data2)
#fit
fit.model2.NB<-sampling(model2.NB, model.data2)
model2.NB<-stan_model("stan/NB_model2.stan")
model2.NB<-stan_model("stan/NB_model2.stan")
#arrange things
model.data2<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time,
age = data$age,
log_people = log(data$people*10^6),
#D = 5,
#dep = data$dep_id,
#id = data$dep_id
)
#arrange things
model.data2<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time,
age = data$age,
log_people = log(data$people*10^6)
#D = 5,
#dep = data$dep_id,
#id = data$dep_id
)
#fit
fit.model2.NB<-sampling(model2.NB, model.data2)
#posterior predictive chiecking
samples_NB2<-rstan::extract(fit.model2.NB)
y_rep<-samples_NB2$y_rep
ppc_dens_overlay(y = model.data2$cases, y_rep[1:200,])
#posterior predictive chiecking
samples_NB2<-rstan::extract(fit.model2.NB)
y_rep<-samples_NB2$y_rep
y_rep
ppc_dens_overlay(y = model.data2$cases, y_rep[1:200,])
#arrange things
model.data2<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time,
age = data$age,
log_people = log(data$people*10)
#D = 5,
#dep = data$dep_id,
#id = data$dep_id
)
#fit
fit.model2.NB<-sampling(model2.NB, model.data2)
#posterior predictive chiecking
samples_NB2<-rstan::extract(fit.model2.NB)
y_rep<-samples_NB2$y_rep
y_rep
ppc_dens_overlay(y = model.data2$cases, y_rep[1:200,])
ppc_dens_overlay(y = model.data2$cases, y_rep[1:200,])
#ppc_dens_overlay(y = model.data2$cases, y_rep[1:200,])
ppc_stat_grouped(
y = model.data$cases,
yrep = y_rep,
group = data$dep,
stat = "mean",
binwidth = 0.2
)
ppc_intervals(
y = data$n,
yrep = y_rep,
x = data$elapsed_time
) +
labs(x = "Days", y = "Cases")
library(knitr)
local({
hook_plot = knit_hooks$get('plot')
knit_hooks$set(plot = function(x, options) {
paste0('\n\n----\n\n', hook_plot(x, options))
})
})
knitr::opts_chunk$set(echo = TRUE, tidy = TRUE)
model.Poisson<-stan_model("stan/poisson_regression.stan")
knitr::opts_chunk$set(fig.align = 'center', warning=FALSE, message=FALSE, fig.asp=0.625, dev='png', global.par = TRUE, dev.args=list(pointsize=10), fig.path = 'figs/')
library(knitr)
local({
hook_plot = knit_hooks$get('plot')
knit_hooks$set(plot = function(x, options) {
paste0('\n\n----\n\n', hook_plot(x, options))
})
})
knitr::opts_chunk$set(echo = TRUE, tidy = TRUE)
library(readr)
library(loo)
library(rstan)
library(dplyr)
library(ggplot2)
library(bayesplot)
library(lubridate)
df<-read_csv("data/central_colombia.csv")
ggplot(df, aes(x = date, y = n)) +
geom_line(aes(linetype = "New daily cases")) +
geom_point(color = "black") +
facet_wrap(~dep, scales = "free_y", ncol = 4, labeller = label_both) +
scale_y_continuous(name = "", limits = range(df$n)) +
scale_linetype_discrete(name = "")
data<-read_csv("data/central_colombia_relevant.csv")
data<-data[order(data$dep),]
data<-data[,c(1,5,2,3,4)]
data
model.Poisson<-stan_model("stan/poisson_regression.stan")
#arrange things
model.data<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time
)
#str(model.Poisson.data)
#run the model
fit.model.Poisson<-sampling(model.Poisson, data=model.data)
#inferred parameters
print(fit.model.Poisson, pars=c("alpha", "beta"))
loo.model.Poisson<-loo(fit.model.Poisson)$estimates
loo.model.Poisson
theme_set(bayesplot::theme_default())
mcmc_scatter(as.matrix(fit.model.Poisson, pars=c("alpha", "beta") ), alpha=0.2)
y_rep<-as.matrix(fit.model.Poisson, pars="y_rep")
ppc_dens_overlay(y = model.data$cases, y_rep[1:200,])
#in this way we check the standardized residuals
mean_y_rep<-colMeans(y_rep)
std_residual<-(model.data$cases - mean_y_rep) / sqrt(mean_y_rep)
qplot(mean_y_rep, std_residual) + hline_at(2) + hline_at(-2)
#posterior predictive chiecking
samples_NB<-rstan::extract(fit.model.NB)
#compile
model.NB<-stan_model("stan/negative_binomial.stan")
#fit
fit.model.NB<-sampling(model.NB, data=model.data)
#inferred parameters
print(fit.model.NB, pars=c("alpha", "beta"))
#posterior predictive chiecking
samples_NB<-rstan::extract(fit.model.NB)
y_rep<-samples_NB$y_rep
ppc_dens_overlay(y = model.data$cases, y_rep[1:200,])
mean_inv_phi<-mean(samples_NB$inv_phi)
mean_y_rep<-colMeans(y_rep)
std_residual<-(model.data$cases - mean_y_rep) / sqrt(mean_y_rep + mean_y_rep^2*mean_inv_phi)
qplot(mean_y_rep, std_residual) + hline_at(2) + hline_at(-2)
ppc_stat_grouped(
y = model.data$cases,
yrep = y_rep,
group = data$dep,
stat = "mean",
binwidth = 0.2
)
data
ppc_intervals(
y = data$n,
yrep = y_rep,
x = data$elapsed_time
) +
labs(x = "Days", y = "Cases")
library(loo)
loo.model.NB<-loo(fit.model.NB)$estimates
loo.model.NB
data <- data %>%
mutate(dep_idx = factor(dep, levels=unique(dep)),
dep_id = as.integer(dep_idx)) %>%
select(-dep_idx)
data<-data[,c(1,2,3,6,4,5)]
data$people<-rep(0, nrow(data))
data[which(data$dep_id==1),]$people<-6.4
data[which(data$dep_id==2),]$people<-7.4
data[which(data$dep_id==3),]$people<-2.9
data[which(data$dep_id==4),]$people<-0.94
data[which(data$dep_id==5),]$people<-4.4
cc<-read_csv("data/colombia_covid.csv")
central.colombia.dep<-c("Bogotá D.C.", "Cundinamarca",  "Valle del Cauca", "Risaralda", "Antioquia")
central.colombia.rows<-which(cc$`Departamento o Distrito` %in% central.colombia.dep)
cc<-cc[central.colombia.rows,]
bogota_mean_age<-cc[which(cc$`Departamento o Distrito`=="Bogotá D.C."),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
cundinamarca_mean_age<-cc[which(cc$`Departamento o Distrito`=="Cundinamarca"),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
valle_cauca_mean_age<-cc[which(cc$`Departamento o Distrito`=="Valle del Cauca"),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
risaralda_mean_age<-cc[which(cc$`Departamento o Distrito`=="Risaralda"),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
antioquia_mean_age<-cc[which(cc$`Departamento o Distrito`=="Antioquia"),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
data$age<-rep(0,nrow(data))
data[which(data$dep_id==1),]$age<-unname(unlist(c(antioquia_mean_age[2])))
data[which(data$dep_id==2),]$age<-unname(unlist(c(bogota_mean_age[2])))
data[which(data$dep_id==3),]$age<-unname(unlist(c(cundinamarca_mean_age[2])))
data[which(data$dep_id==4),]$age<-unname(unlist(c(risaralda_mean_age[2])))
data[which(data$dep_id==5),]$age<-unname(unlist(c(valle_cauca_mean_age[2])))
model2.NB<-stan_model("stan/NB_model2.stan")
#arrange things
model.data2<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time,
age = data$age
)
#fit
fit.model2.NB<-sampling(model2.NB, model.data2)
#posterior predictive chiecking
samples_NB2<-rstan::extract(fit.model2.NB)
y_rep<-samples_NB2$y_rep
ppc_dens_overlay(y = model.data2$cases, y_rep[1:200,])
ppc_stat_grouped(
y = model.data2$cases,
yrep = y_rep,
group = data$dep,
stat = "mean",
binwidth = 0.2
)
ppc_intervals(
y = data$n,
yrep = y_rep,
x = data$elapsed_time
) +
labs(x = "Days", y = "Cases")
loo.model.NB2<-loo(fit.model2.NB)$estimates
loo.model.NB2
#km^2
antioquia_surface<-63600
bogota_surface<-1775
cundinamarca_surface<-24210
risaralda_surface<-4140
valle_cauca_surface<-22195
#population density inhabitants/km^2
antioquia_density<-88.06
bogota_density<-4552
cundinamarca_density<-99.15
risaralda_density<-59.16
valle_cauca_density<-183.04
data$surface<-rep(0, nrow(data))
data$density<-rep(0, nrow(data))
data[which(data$dep_id==1),]$surface<-antioquia_surface
data[which(data$dep_id==2),]$surface<-bogota_surface
data[which(data$dep_id==3),]$surface<-cundinamarca_surface
data[which(data$dep_id==4),]$surface<-risaralda_surface
data[which(data$dep_id==5),]$surface<-valle_cauca_surface
data[which(data$dep_id==1),]$density<-antioquia_density
data[which(data$dep_id==2),]$density<-bogota_density
data[which(data$dep_id==3),]$density<-cundinamarca_density
data[which(data$dep_id==4),]$density<-risaralda_density
data[which(data$dep_id==5),]$density<-valle_cauca_density
#compile the model
model3.NB<-stan_model("stan/NB_model3.stan")
dep_data<-data %>%
select(
dep_id,
people,
surface,
density
) %>%
unique() %>%
arrange(dep_id) %>%
select(-dep_id) %>%
as.matrix()
#prepare the new data
data.hier.NB<-
with(data,
list(N = nrow(data),
cases = data$n,
time = data$elapsed_time,
age = data$age,
K=3,
J=5,
dep_id = data$dep_id,
dep_data = dep_data
)
)
#fit the model
fit.hier.NB<-sampling(model3.NB, data.hier.NB)
#extract --> rhat is good for all chains
sampling.hier.NB<-rstan::extract(fit.hier.NB)
print(fit.hier.NB, pars=c('phi','beta_t','beta_a','alpha_d','sigma_alpha', 'mu'))
#posterior predictive chiecking
y_rep<-sampling.hier.NB$y_rep
ppc_dens_overlay(y = data.hier.NB$cases, y_rep[1:200,])
#accuracy across departments
ppc_stat_grouped(
y = data.hier.NB$cases,
yrep = y_rep,
group = data$dep,
stat = "mean",
binwidth = 0.2
)
loo.model.NB.hier<-loo(fit.hier.NB)$estimates
loo.model.NB.hier
mean_inv_phi<-mean(sampling.hier.NB$inv_phi)
mean_y_rep<-colMeans(y_rep)
std_residual<-(data.hier.NB$cases - mean_y_rep) / sqrt(mean_y_rep + mean_y_rep^2*mean_inv_phi)
qplot(mean_y_rep, std_residual, xlab = "predicted", ylab="standardized residuals") + hline_at(2) + hline_at(-2)
ppc_intervals(
y = data$n,
yrep = y_rep,
x = data$elapsed_time
) +
labs(x = "Days", y = "Cases")
print(model.Poisson)
#parameters recovering
posterior.parameters<-as.matrix(fit.model.Poisson, pars=c("alpha", "beta"))
df
data
data
df
data
df
df<-df[order(df$dep),]
df
data
df
df<-df[,c(1,4,2,3)]
df
#try with the poisson model
Poisson.data.complete<-list(
N = nrow(df),
cases = df$n,
time = df$elapsed_time
)
#run the model
fit.Poisson.complete<-sampling(model.Poisson, data=Poisson.data.complete)
#try with the poisson model
model.Poisson<-stan_model("stan/poisson_regression.stan")
Poisson.data.complete<-list(
N = nrow(df),
cases = df$n,
time = df$elapsed_time
)
#run the model
fit.Poisson.complete<-sampling(model.Poisson, data=Poisson.data.complete)
#try with the poisson model
model.Poisson<-stan_model("stan/poisson_regression.stan")
#try with the poisson model
model.Poisson<-stan_model("stan/poisson_regression.stan")
Poisson.data.complete<-list(
N = nrow(df),
cases = df$n,
time = df$elapsed_time
)
#run the model
fit.Poisson.complete<-sampling(model.Poisson, data=Poisson.data.complete)
df
str(Poisson.data.complete)
#try with the poisson model
model.Poisson<-stan_model("stan/poisson_regression.stan")
Poisson.data.complete<-list(
N = nrow(df),
cases = df$n,
time = df$elapsed_time
)
#run the model
fit.Poisson.complete<-sampling(model.Poisson, data=Poisson.data.complete)
knitr::opts_chunk$set(fig.align = 'center', warning=FALSE, message=FALSE, fig.asp=0.625, dev='png', global.par = TRUE, dev.args=list(pointsize=10), fig.path = 'figs/')
library(knitr)
local({
hook_plot = knit_hooks$get('plot')
knit_hooks$set(plot = function(x, options) {
paste0('\n\n----\n\n', hook_plot(x, options))
})
})
knitr::opts_chunk$set(echo = TRUE, tidy = TRUE)
library(readr)
library(loo)
library(rstan)
library(dplyr)
library(ggplot2)
library(bayesplot)
library(lubridate)
df<-read_csv("data/central_colombia.csv")
ggplot(df, aes(x = date, y = n)) +
geom_line(aes(linetype = "New daily cases")) +
geom_point(color = "black") +
facet_wrap(~dep, scales = "free_y", ncol = 4, labeller = label_both) +
scale_y_continuous(name = "", limits = range(df$n)) +
scale_linetype_discrete(name = "")
data<-read_csv("data/central_colombia_relevant.csv")
data<-data[order(data$dep),]
data<-data[,c(1,5,2,3,4)]
data
model.Poisson<-stan_model("stan/poisson_regression.stan")
#arrange things
model.data<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time
)
#str(model.Poisson.data)
#run the model
fit.model.Poisson<-sampling(model.Poisson, data=model.data)
#inferred parameters
print(fit.model.Poisson, pars=c("alpha", "beta"))
loo.model.Poisson<-loo(fit.model.Poisson)$estimates
model.Poisson<-stan_model("stan/poisson_regression.stan")
#arrange things
model.data<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time
)
#run the model
fit.model.Poisson<-sampling(model.Poisson, data=model.data)
