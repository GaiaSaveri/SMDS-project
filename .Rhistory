scale_x_date(name = "Date", date_labels = "%b") +
scale_y_continuous(name = "", limits = range(df$n)) +
scale_linetype_discrete(name = "")
ggplot(df, aes(x = date, y = n)) +
geom_line(aes(linetype = "New daily cases")) +
geom_point(color = "black") +
facet_wrap(~dep, scales = "free", ncol = 4, labeller = label_both) +
scale_x_date(name = "Date", date_labels = "%b") +
scale_y_continuous(name = "", limits = range(df$n)) +
scale_linetype_discrete(name = "")
ggplot(df, aes(x = date, y = n)) +
geom_line(aes(linetype = "New daily cases")) +
geom_point(color = "black") +
facet_wrap(~dep, scales = "free_y", ncol = 4, labeller = label_both) +
scale_x_date(name = "Date", date_labels = "%b") +
scale_y_continuous(name = "", limits = range(df$n)) +
scale_linetype_discrete(name = "")
ggplot(df, aes(x = date, y = n)) +
geom_line(aes(linetype = "New daily cases")) +
geom_point(color = "black") +
facet_wrap(~dep, scales = "free_y", ncol = 4, labeller = label_both) +
scale_y_continuous(name = "", limits = range(df$n)) +
scale_linetype_discrete(name = "")
df
covid_relevant_dp
covid_relevant_dp
covid_relevant_dp<-as.data.frame(covid_relevant_dp)
covid_dp$date<-as.Date(covid_dp$date, "%Y-%m-%d")
covid_relevant_dp<-covid_relevant_dp %>%
mutate(BETWEEN0=as.numeric(difftime(date,lag(date,1), units = "days")),BETWEEN=ifelse(is.na(BETWEEN0),0,BETWEEN0),elapsed_time=cumsum(as.numeric(BETWEEN)))%>%
select(-c(BETWEEN0,BETWEEN))
covid_relevant_dp
write_csv(covid_relevant_dp, "central_colombia_relevant.csv")
ggplot(df, aes(x = date, y = n)) +
geom_line(aes(linetype = "New daily cases")) +
geom_point(color = "black") +
facet_wrap(~dep, scales = "free_y", ncol = 4, labeller = label_both) +
scale_y_continuous(name = "", limits = range(df$n)) +
scale_linetype_discrete(name = "")
data<-read_csv("central_colombia_relevant")
data<-read_csv("central_colombia_relevant.csv")
head(data)
data<-read_csv("central_colombia_relevant.csv")
head(data)
data<-read_csv("central_colombia_relevant.csv")
head(data)
write_csv(covid_relevant_dp, "central_colombia_relevant.csv")
data<-read_csv("central_colombia_relevant")
write_csv(covid_relevant_dp, "central_colombia_relevant.csv")
data<-read_csv("central_colombia_relevant.csv")
head(data)
data<-data[order(dep),]
data<-data[order(data$dep),]
data
data<-data[,c(1,5,2,3,4)]
data
head(data)
View(data)
model.Poisson<-stan_model("stan/poisson_regression.stan")
model.Poisson<-stan_model("stan/poisson_regression.stan")
model.Pisson.data<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time
)
model.Poisson.data<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time
)
str(model.Poisson.data)
#run the model
fit.model.Poisson<-sampling(model.Poisson, data=model.Poisson.data)
#inferred parameters
print(fit.model.Poisson, pars=c("alpha", "beta"))
mcmc_scatter(as.matrix(fit.model.Poisson, pars=c("alpha", "beta") ), alpha=0.2)
y_rep<-as.matrix(fit.model.Poisson, pars="y_rep")
ppc_dens_overlay(y = model.Poisson.data$cases, y_rep[1:200,])
mean_y_rep<-colMeans(y_rep)
std_residual<-(model.Poisson.data$n - mean_y_rep) / sqrt(mean_y_rep)
qqplot(mean_y_rep, std_residual)
qplot(mean_y_rep, std_residual)
mean_y_rep
length(mean_y_rep)
length(std:residual)
length(std_residual)
std_residual<-(model.Poisson.data$cases - mean_y_rep) / sqrt(mean_y_rep)
qplot(mean_y_rep, std_residual)
qplot(mean_y_rep, std_residual) + hline(3) + hline(-3)
qplot(mean_y_rep, std_residual) + hline_at(3) + hline_at(-3)
theme_set(bayesplot::theme_default())
ppc_dens_overlay(y = model.Poisson.data$cases, y_rep[1:200,])
qplot(mean_y_rep, std_residual) + hline_at(3) + hline_at(-3)
qplot(mean_y_rep, std_residual) + hline_at(2) + hline_at(-2)
qplot(mean_y_rep, std_residual) + hline_at(2) + hline_at(-2)
knitr::opts_chunk$set(fig.align = 'center', warning=FALSE, message=FALSE, fig.asp=0.625, dev='png', global.par = TRUE, dev.args=list(pointsize=10), fig.path = 'figs/')
library(knitr)
local({
hook_plot = knit_hooks$get('plot')
knit_hooks$set(plot = function(x, options) {
paste0('\n\n----\n\n', hook_plot(x, options))
})
})
knitr::opts_chunk$set(echo = TRUE, tidy = TRUE)
library(rstan)
library(dplyr)
library(ggplot2)
library(bayesplot)
library(lubridate)
df<-read_csv("central_colombia.csv")
library(readr)
df<-read_csv("central_colombia.csv")
knitr::opts_chunk$set(fig.align = 'center', warning=FALSE, message=FALSE, fig.asp=0.625, dev='png', global.par = TRUE, dev.args=list(pointsize=10), fig.path = 'figs/')
library(knitr)
local({
hook_plot = knit_hooks$get('plot')
knit_hooks$set(plot = function(x, options) {
paste0('\n\n----\n\n', hook_plot(x, options))
})
})
knitr::opts_chunk$set(echo = TRUE, tidy = TRUE)
library(readr)
library(rstan)
library(dplyr)
library(ggplot2)
library(bayesplot)
library(lubridate)
df<-read_csv("central_colombia.csv")
ggplot(df, aes(x = date, y = n)) +
geom_line(aes(linetype = "New daily cases")) +
geom_point(color = "black") +
facet_wrap(~dep, scales = "free_y", ncol = 4, labeller = label_both) +
scale_y_continuous(name = "", limits = range(df$n)) +
scale_linetype_discrete(name = "")
data<-read_csv("central_colombia_relevant.csv")
data<-data[order(data$dep),]
data<-data[,c(1,5,2,3,4)]
head(data)
model.Poisson<-stan_model("stan/poisson_regression.stan")
#arrange things
model.Poisson.data<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time
)
#str(model.Poisson.data)
#run the model
fit.model.Poisson<-sampling(model.Poisson, data=model.Poisson.data)
#inferred parameters
print(fit.model.Poisson, pars=c("alpha", "beta"))
theme_set(bayesplot::theme_default())
mcmc_scatter(as.matrix(fit.model.Poisson, pars=c("alpha", "beta") ), alpha=0.2)
y_rep<-as.matrix(fit.model.Poisson, pars="y_rep")
ppc_dens_overlay(y = model.Poisson.data$cases, y_rep[1:200,])
#in this way we check the standardized residuals
mean_y_rep<-colMeans(y_rep)
length(std_residual)
std_residual<-(model.Poisson.data$cases - mean_y_rep) / sqrt(mean_y_rep)
qplot(mean_y_rep, std_residual) + hline_at(2) + hline_at(-2)
mean_y_rep<-colMeans(y_rep)
std_residual<-(model.Poisson.data$cases - mean_y_rep) / sqrt(mean_y_rep)
qplot(mean_y_rep, std_residual) + hline_at(2) + hline_at(-2)
df<-read_csv("data/central_colombia.csv")
model.NB<-stan_model("stan/negative_binomial.stan")
model.NB<-stan_model("stan/negative_binomial.stan")
model.NB<-stan_model("stan/negative_binomial.stan")
knitr::opts_chunk$set(fig.align = 'center', warning=FALSE, message=FALSE, fig.asp=0.625, dev='png', global.par = TRUE, dev.args=list(pointsize=10), fig.path = 'figs/')
library(knitr)
local({
hook_plot = knit_hooks$get('plot')
knit_hooks$set(plot = function(x, options) {
paste0('\n\n----\n\n', hook_plot(x, options))
})
})
knitr::opts_chunk$set(echo = TRUE, tidy = TRUE)
library(readr)
library(rstan)
library(dplyr)
library(ggplot2)
library(bayesplot)
library(lubridate)
df<-read_csv("data/central_colombia.csv")
ggplot(df, aes(x = date, y = n)) +
geom_line(aes(linetype = "New daily cases")) +
geom_point(color = "black") +
facet_wrap(~dep, scales = "free_y", ncol = 4, labeller = label_both) +
scale_y_continuous(name = "", limits = range(df$n)) +
scale_linetype_discrete(name = "")
data<-read_csv("data/central_colombia_relevant.csv")
data<-data[order(data$dep),]
data<-data[,c(1,5,2,3,4)]
head(data)
model.Poisson<-stan_model("stan/poisson_regression.stan")
#arrange things
model.Poisson.data<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time
)
#str(model.Poisson.data)
#run the model
fit.model.Poisson<-sampling(model.Poisson, data=model.Poisson.data)
#inferred parameters
print(fit.model.Poisson, pars=c("alpha", "beta"))
theme_set(bayesplot::theme_default())
mcmc_scatter(as.matrix(fit.model.Poisson, pars=c("alpha", "beta") ), alpha=0.2)
y_rep<-as.matrix(fit.model.Poisson, pars="y_rep")
ppc_dens_overlay(y = model.Poisson.data$cases, y_rep[1:200,])
#in this way we check the standardized residuals
mean_y_rep<-colMeans(y_rep)
std_residual<-(model.Poisson.data$cases - mean_y_rep) / sqrt(mean_y_rep)
qplot(mean_y_rep, std_residual) + hline_at(2) + hline_at(-2)
model.NB<-stan_model("stan/negative_binomial.stan")
model.NB<-stan_model("stan/negative_binomial.stan")
debug(rstan::stanc)
writeLines("stan/negative_binomial.stan")
install.packages(c("lubridate", "readr"))
knitr::opts_chunk$set(fig.align = 'center', warning=FALSE, message=FALSE, fig.asp=0.625, dev='png', global.par = TRUE, dev.args=list(pointsize=10), fig.path = 'figs/')
library(knitr)
local({
hook_plot = knit_hooks$get('plot')
knit_hooks$set(plot = function(x, options) {
paste0('\n\n----\n\n', hook_plot(x, options))
})
})
knitr::opts_chunk$set(echo = TRUE, tidy = TRUE)
library(readr)
library(rstan)
library(dplyr)
library(ggplot2)
library(bayesplot)
library(lubridate)
df<-read_csv("data/central_colombia.csv")
ggplot(df, aes(x = date, y = n)) +
geom_line(aes(linetype = "New daily cases")) +
geom_point(color = "black") +
facet_wrap(~dep, scales = "free_y", ncol = 4, labeller = label_both) +
scale_y_continuous(name = "", limits = range(df$n)) +
scale_linetype_discrete(name = "")
data<-read_csv("data/central_colombia_relevant.csv")
data<-data[order(data$dep),]
data<-data[,c(1,5,2,3,4)]
head(data)
model.Poisson<-stan_model("stan/poisson_regression.stan")
#arrange things
model.data<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time
)
#str(model.Poisson.data)
#run the model
fit.model.Poisson<-sampling(model.Poisson, data=model.data)
#inferred parameters
print(fit.model.Poisson, pars=c("alpha", "beta"))
theme_set(bayesplot::theme_default())
mcmc_scatter(as.matrix(fit.model.Poisson, pars=c("alpha", "beta") ), alpha=0.2)
y_rep<-as.matrix(fit.model.Poisson, pars="y_rep")
ppc_dens_overlay(y = model.data$cases, y_rep[1:200,])
#in this way we check the standardized residuals
mean_y_rep<-colMeans(y_rep)
std_residual<-(model.data$cases - mean_y_rep) / sqrt(mean_y_rep)
qplot(mean_y_rep, std_residual) + hline_at(2) + hline_at(-2)
#compile
model.NB<-stan_model("stan/negative_binomial.stan")
#fit
fit.model.NB<-sampling(model.NB, data=model.data)
#inferred parameters
print(fit.model.NB)
y_rep<-as.matrix(fit.model.NB, pars="y_rep")
ppc_dens_overlay(y = model.data$cases, y_rep[1:200,])
y_rep<-as.matrix(fit.model.NB, pars="y_rep")
y_rep
#fit
fit.model.NB<-sampling(model.NB, data=model.data)
#compile
model.NB<-stan_model("stan/negative_binomial.stan")
#fit
fit.model.NB<-sampling(model.NB, data=model.data)
#inferred parameters
print(fit.model.NB)
#inferred parameters
print(fit.model.NB, pars=c("alpha", "beta"))
y_rep<-as.matrix(fit.model.NB, pars="y_rep")
ppc_dens_overlay(y = model.data$cases, y_rep[1:200,])
ppc_dens_overlay(y = model.data$cases, y_rep[1:200,])
#posterior predictive chiecking
samples_NB<-rstan::extract(fit.model.NB)
y_rep<-samples_NB$y_rep
ppc_dens_overlay(y = model.data$cases, y_rep[1:200,])
ppc_stat(y=model.data$cases, yrep=y_rep, stat="prop_zero")
prop_zero<-function(x)(mean(x==0))
ppc_stat(y=model.data$cases, yrep=y_rep, stat="prop_zero")
#run the model
fit.model.Poisson<-sampling(model.Poisson, data=model.data)
#inferred parameters
print(fit.model.Poisson, pars=c("alpha", "beta"))
y_rep<-as.matrix(fit.model.Poisson, pars="y_rep")
ppc_dens_overlay(y = model.data$cases, y_rep[1:200,])
ppc_stat(y=model.data$cases, yrep=y_rep, stat="prop_zero")
#fit
fit.model.NB<-sampling(model.NB, data=model.data)
#inferred parameters
print(fit.model.NB, pars=c("alpha", "beta"))
#posterior predictive chiecking
samples_NB<-rstan::extract(fit.model.NB)
y_rep<-samples_NB$y_rep
ppc_dens_overlay(y = model.data$cases, y_rep[1:200,])
mean_y_rep<-colMeans(y_rep)
mean_inv_phi<-mean(samples_NB$inv_phi)
mean_y_rep<-colMeans(y_rep)
std_residual<-(model.data$cases - mean_y_rep) / sqrt(mean_y_rep + mean_y_rep^2*mean_inv_phi)
qplot(mean_y_rep, std_residual) + hline_at(2) + hline_at(-2)
ppc_stat_grouped(
y = model.data$cases,
yrep = y_rep,
group = data$dep,
stat = "mean",
bandwidth = 0.2
)
ppc_stat_grouped(
y = model.data$cases,
yrep = y_rep,
group = data$dep,
stat = "mean",
binwidth = 0.2
)
install.packages("fastDummies")
library(knitr)
local({
hook_plot = knit_hooks$get('plot')
knit_hooks$set(plot = function(x, options) {
paste0('\n\n----\n\n', hook_plot(x, options))
})
})
knitr::opts_chunk$set(echo = TRUE, tidy = TRUE)
#compile
model2.NB<-stan_model("stan/NB_model2.stan")
knitr::opts_chunk$set(fig.align = 'center', warning=FALSE, message=FALSE, fig.asp=0.625, dev='png', global.par = TRUE, dev.args=list(pointsize=10), fig.path = 'figs/')
library(knitr)
local({
hook_plot = knit_hooks$get('plot')
knit_hooks$set(plot = function(x, options) {
paste0('\n\n----\n\n', hook_plot(x, options))
})
})
knitr::opts_chunk$set(echo = TRUE, tidy = TRUE)
library(readr)
library(rstan)
library(dplyr)
library(ggplot2)
library(bayesplot)
library(lubridate)
df<-read_csv("data/central_colombia.csv")
ggplot(df, aes(x = date, y = n)) +
geom_line(aes(linetype = "New daily cases")) +
geom_point(color = "black") +
facet_wrap(~dep, scales = "free_y", ncol = 4, labeller = label_both) +
scale_y_continuous(name = "", limits = range(df$n)) +
scale_linetype_discrete(name = "")
data<-read_csv("data/central_colombia_relevant.csv")
data<-data[order(data$dep),]
data<-data[,c(1,5,2,3,4)]
head(data)
model.Poisson<-stan_model("stan/poisson_regression.stan")
#arrange things
model.data<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time
)
#str(model.Poisson.data)
#run the model
fit.model.Poisson<-sampling(model.Poisson, data=model.data)
#inferred parameters
print(fit.model.Poisson, pars=c("alpha", "beta"))
theme_set(bayesplot::theme_default())
mcmc_scatter(as.matrix(fit.model.Poisson, pars=c("alpha", "beta") ), alpha=0.2)
y_rep<-as.matrix(fit.model.Poisson, pars="y_rep")
ppc_dens_overlay(y = model.data$cases, y_rep[1:200,])
#in this way we check the standardized residuals
mean_y_rep<-colMeans(y_rep)
std_residual<-(model.data$cases - mean_y_rep) / sqrt(mean_y_rep)
qplot(mean_y_rep, std_residual) + hline_at(2) + hline_at(-2)
#posterior predictive chiecking
samples_NB<-rstan::extract(fit.model.NB)
data <- data %>%
mutate(dep_idx = factor(dep, levels=unique(dep)),
dep_id = as.integer(dep_idx)) %>%
select(-dep_idx)
data<-data[,c(1,2,3,6,4,5)]
data
#compile
model2.NB<-stan_model("stan/NB_model2.stan")
library(rstanarm)
data
model.hierarchical<-stan_glmer.nb(n~(1|dep_id)+elapsed_time, data=data)
iters<-2000
model.hierarchical<-stan_glmer(n~(1|dep_id)+elapsed_time, data=data, family=poisson, iter=iters)
model.hierarchical<-stan_glmer(n~elapsed_time, data=data, family=poisson, iter=iters)
model.hierarchical<-stan_glmer(n~elapsed_time, data=data, family=poisson, iter=iters)
model.hierarchical<-stan_glmer(n~elapsed_time+(1|dep_id), data=data, family=poisson, iter=iters)
knitr::opts_chunk$set(fig.align = 'center', warning=FALSE, message=FALSE, fig.asp=0.625, dev='png', global.par = TRUE, dev.args=list(pointsize=10), fig.path = 'figs/')
library(knitr)
local({
hook_plot = knit_hooks$get('plot')
knit_hooks$set(plot = function(x, options) {
paste0('\n\n----\n\n', hook_plot(x, options))
})
})
knitr::opts_chunk$set(echo = TRUE, tidy = TRUE)
library(readr)
library(rstan)
library(dplyr)
library(ggplot2)
library(bayesplot)
library(lubridate)
data<-read_csv("data/SIR_data.csv")
data<- data %>% select(-X1)
data<-data[,c(1,3,2)]
missing.data<-read_csv("data/dead_recovered.csv")
missing.data<-missing.data %>% select(-"confirmed")
missing.data<-missing.data %>% select(-"confirmed_daily")
missing.data<-missing.data[-1,]
missing.data<-missing.data[-c(2,3,5),]
deaths<-missing.data$deaths
recovered<-missing.data$recovered
data$`cumulative_deaths`<-deaths
data$`cumulative_recoveries`<-recovered
#pop in millions
bogotà_pop<-7.4
antioquia_pop<-6.4
cundimarca_pop<-2.9
caldas_pop<-0.99
valle_cauca_pop<-4.4
meta_pop<-1
risaralda_pop<-0.94
santander_pop<-2.1
quindio_pop<-0.53
tolima_pop<-1.3
cauca_pop<-1.4
casanare_pop<-0.42
boyaca_pop<-1.2
tot_pop<-N<-7.4+6.4+2.9+0.99+4.4+1+0.94+2.1+0.53+1.3+1.4+0.42+1.2
N<-N*10^6 #from millions to individuals
All<-as.vector(rep(N,25))
data$S<-All-data$y
data$I<-data$y-data$cumulative_deaths-data$cumulative_recoveries
data$R<-data$cumulative_deaths+data$cumulative_recoveries
SIR.data<-data[,c(2,3,6,7,8)]
head(SIR.data)
cases<-SIR.data$y
n_days<-length(cases)
t<-seq(0, n_days, by=1)
#I.C. for the ODEs
t0<-0
t<-t[-1]
i0<-1
s0<-N-i0
r0<-0
y0 = c(S=s0, I=i0, R=r0)
Sir.data<-list(n_days = n_days,
y0 = y0,
t0 = t0,
ts = t,
N = N,
cases = cases)
#compile the model
Sir.model<-stan_model("stan/Sir.stan")
setwd("~/Desktop/SMDS-project")
#compile the model
Sir.model<-stan_model("stan/Sir.stan")
#compile the model
Sir.model<-stan_model("stan/Sir.stan")
#compile the model
Sir.model<-stan_model("stan/SIR.stan")
#run the model
fit.model<-sampling(Sir.model, data=Sir.data)
pars<-c("beta", "gamma", "R0", "recovery_time")
print(fit.model, pars=pars)
stan_dens<-(fit.model, pars=pars, separate_chains=TRUE)
stan_dens(fit.model, pars=pars, separate_chains=TRUE)
stan_dens(fit.model, pars=c("beta", "gamma"), separate_chains=TRUE)
#compile the model
Sir.model2<-stan_model("stan/SIR.stan")
#run the model
fit.model2<-sampling(Sir.model, data=Sir.data)
pars<-c("beta", "gamma", "R0", "recovery_time")
print(fit.model, pars=pars)
stan_dens(fit.model, pars=c("beta", "gamma"), separate_chains=TRUE)
#compile the model
Sir.model2<-stan_model("stan/SIR.stan")
#run the model
fit.model2<-sampling(Sir.model, data=Sir.data)
pars<-c("beta", "gamma", "R0", "recovery_time")
print(fit.model, pars=pars)
stan_dens(fit.model, pars=c("beta", "gamma"), separate_chains=TRUE)
print(fit.model2, pars=pars)
stan_dens(fit.model2, pars=c("beta", "gamma"), separate_chains=TRUE)
#compile the model
Sir.model2<-stan_model("stan/SIR.stan")
#run the model
fit.model2<-sampling(Sir.model2, data=Sir.data)
print(fit.model2, pars=pars)
stan_dens(fit.model2, pars=c("beta", "gamma"), separate_chains=TRUE)
#compile the model
Sir.model2<-stan_model("stan/SIR.stan")
#run the model
fit.model2<-sampling(Sir.model2, data=Sir.data)
pars<-c("beta", "gamma", "R0", "recovery_time")
print(fit.model2, pars=pars)
stan_dens(fit.model2, pars=c("beta", "gamma"), separate_chains=TRUE)
