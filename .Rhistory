#I.C. for the ODEs
t0<-0
t<-t[-1]
i0<-1
s0<-N-i0
r0<-0
y0 = c(S=s0, I=i0, R=r0)
Sir.data<-list(n_days = n_days,
y0 = y0,
t0 = t0,
ts = t,
N = N,
cases = cases,
beta = 0.5,
gamma = 0.4)
#compile the model
Sir.model<-stan_model("stan/SIR.stan")
#run the model
fit.model<-sampling(Sir.model, data=Sir.data)
pars<-c("beta", "gamma", "R0", "recovery_time")
print(fit.model, pars=pars)
pars<-c("R0", "recovery_time")
print(fit.model, pars=pars)
stan_dens(fit.model, pars=pars, separate_chains=TRUE)
pred<-cbind(as.data.frame(summary(fit.model, pars="pred_cases", probs = c(0.05, 0.5, 0.95))$summary), t, cases)
colnames(pred)<-make.names(colnames(pred))
#number of infected for each day
params <- lapply(t, function(i){sprintf("y[%s,2]", i)})
yhat <- as.data.frame(summary(fit.model,
pars = params, probs = c(0.05, 0.5, 0.95))$summary)
colnames(yhat) <- make.names(colnames(yhat))
ggplot(yhat, mapping = aes(x = SIR.data$elapsed_time)) +
#geom_ribbon(aes(ymin = -yhat$se_mean, ymax = yhat$se_mean), fill = "red", alpha = 0.3) +
geom_line(mapping = aes(x = SIR.data$elapsed_time, y = yhat$mean)) +
geom_point(aes(y=SIR.data$I)) +
labs(x="Days after first case", y="Number of infected people")
dS<--beta*I*S/N
SIR<-function(time, state, parameters) {
par<-as.list(c(state, parameters))
with(par, {
dS<--beta*I*S/N
dI<-beta*I*S/N - gamma*I
dR<-gamma*I
list(c(dS, dI, dR))
})
}
init<-c(S = SIR.data$S[1], I = SIR.data$I[1], R=0)
RSS<-function(parameters) {
names(parameters)<-c("beta", "gamma")
out <-ode(y=init, times=SIR.data$elapsed_time, func=SIR, parms=parameters)
fit<-out[,3]
sum((SIR.data$y-fit)^2)
}
Opt<-optim(c(0.5,0.5), RSS, method="L-BFGS-B", lower=c(0,0))
library(deSolve)
RSS<-function(parameters) {
names(parameters)<-c("beta", "gamma")
out <-ode(y=init, times=SIR.data$elapsed_time, func=SIR, parms=parameters)
fit<-out[,3]
sum((SIR.data$y-fit)^2)
}
Opt<-optim(c(0.5,0.5), RSS, method="L-BFGS-B", lower=c(0,0))
#check if optim coverged--> it did
Opt$message
Opt.par<-setNames(Opt$par, c("beta", "gamma"))
Opt.par
fitted.cumulative.incidence<-data.frame(ode(y=init, times=SIR.data$elapsed_time, func=SIR, parms = Opt.par))
ggplot(SIR.data,aes(x=SIR.data$elapsed_time)) + geom_line(aes(y=SIR.data$y), colour="red") +
geom_point(aes(y=fitted.cumulative.incidence$I), colour="orange")+
labs(x = "Days",y="Cumulative Incidence", title="Fitted vs observed cases")
R0<-as.numeric(Opt.par[1]/Opt.par[2])
R0
cases<-SIR.data$y
n_days<-length(cases)
t<-seq(0, n_days, by=1)
#I.C. for the ODEs
t0<-0
t<-t[-1]
i0<-1
s0<-N-i0
r0<-0
y0 = c(S=s0, I=i0, R=r0)
Sir.data<-list(n_days = n_days,
y0 = y0,
t0 = t0,
ts = t,
N = N,
cases = cases)
#compile the model
Sir.model<-stan_model("stan/SIR.stan")
#run the model
fit.model<-sampling(Sir.model, data=Sir.data)
#compile the model
Sir.model<-stan_model("stan/SIR.stan")
#run the model
fit.model<-sampling(Sir.model, data=Sir.data)
#compile the model
Sir.model<-stan_model("stan/SIR.stan")
#run the model
fit.model<-sampling(Sir.model, data=Sir.data)
("beta", "gamma", "R0", "recovery_time")
pars<-c("beta", "gamma", "R0", "recovery_time")
print(fit.model, pars=pars)
stan_dens(fit.model, pars=pars, separate_chains=TRUE)
pred<-cbind(as.data.frame(summary(fit.model, pars="pred_cases", probs = c(0.05, 0.5, 0.95))$summary), t, cases)
colnames(pred)<-make.names(colnames(pred))
#number of infected for each day
params <- lapply(t, function(i){sprintf("y[%s,2]", i)})
yhat <- as.data.frame(summary(fit.model,
pars = params, probs = c(0.05, 0.5, 0.95))$summary)
colnames(yhat) <- make.names(colnames(yhat))
yhat
ggplot(yhat, mapping = aes(x = SIR.data$elapsed_time)) +
#geom_ribbon(aes(ymin = -yhat$se_mean, ymax = yhat$se_mean), fill = "red", alpha = 0.3) +
geom_line(mapping = aes(x = SIR.data$elapsed_time, y = yhat$mean)) +
geom_point(aes(y=SIR.data$I)) +
labs(x="Days after first case", y="Number of infected people")
ggplot(yhat, mapping = aes(x = SIR.data$elapsed_time[1:20])) +
#geom_ribbon(aes(ymin = -yhat$se_mean, ymax = yhat$se_mean), fill = "red", alpha = 0.3) +
geom_line(mapping = aes(x = SIR.data$elapsed_time[1:20], y = yhat$mean[1:20])) +
geom_point(aes(y=SIR.data$I[1:20])) +
labs(x="Days after first case", y="Number of infected people")
ggplot(yhat, mapping = aes(x = SIR.data$elapsed_time[1:20])) +
#geom_ribbon(aes(ymin = -yhat$se_mean, ymax = yhat$se_mean), fill = "red", alpha = 0.3) +
#geom_line(mapping = aes(x = SIR.data$elapsed_time[1:20], y = yhat$mean[1:20])) +
#geom_point(aes(y=SIR.data$I[1:20])) +
labs(x="Days after first case", y="Number of infected people")
ggplot(yhat[1:20], mapping = aes(x = SIR.data$elapsed_time[1:20])) +
#geom_ribbon(aes(ymin = -yhat$se_mean, ymax = yhat$se_mean), fill = "red", alpha = 0.3) +
#geom_line(mapping = aes(x = SIR.data$elapsed_time[1:20], y = yhat$mean[1:20])) +
#geom_point(aes(y=SIR.data$I[1:20])) +
labs(x="Days after first case", y="Number of infected people")
ggplot(yhat[1:20,], mapping = aes(x = SIR.data$elapsed_time[1:20])) +
#geom_ribbon(aes(ymin = -yhat$se_mean, ymax = yhat$se_mean), fill = "red", alpha = 0.3) +
#geom_line(mapping = aes(x = SIR.data$elapsed_time[1:20], y = yhat$mean[1:20])) +
#geom_point(aes(y=SIR.data$I[1:20])) +
labs(x="Days after first case", y="Number of infected people")
ggplot(yhat[1:20,], mapping = aes(x = SIR.data$elapsed_time[1:20])) +
#geom_ribbon(aes(ymin = -yhat$se_mean, ymax = yhat$se_mean), fill = "red", alpha = 0.3) +
geom_line(mapping = aes(x = SIR.data$elapsed_time[1:20], y = yhat$mean[1:20])) +
geom_point(aes(y=SIR.data$I[1:20])) +
labs(x="Days after first case", y="Number of infected people")
ggplot(yhat[1:19,], mapping = aes(x = SIR.data$elapsed_time[1:19])) +
#geom_ribbon(aes(ymin = -yhat$se_mean, ymax = yhat$se_mean), fill = "red", alpha = 0.3) +
geom_line(mapping = aes(x = SIR.data$elapsed_time[1:19], y = yhat$mean[1:19])) +
geom_point(aes(y=SIR.data$I[1:19])) +
labs(x="Days after first case", y="Number of infected people")
SIR.data$elapsed_time[1:19]
ggplot(yhat[1:18,], mapping = aes(x = SIR.data$elapsed_time[1:18])) +
#geom_ribbon(aes(ymin = -yhat$se_mean, ymax = yhat$se_mean), fill = "red", alpha = 0.3) +
geom_line(mapping = aes(x = SIR.data$elapsed_time[1:18], y = yhat$mean[1:18])) +
geom_point(aes(y=SIR.data$I[1:18])) +
labs(x="Days after first case", y="Number of infected people")
knitr::opts_chunk$set(fig.align = 'center', warning=FALSE, message=FALSE, fig.asp=0.625, dev='png', global.par = TRUE, dev.args=list(pointsize=10), fig.path = 'figs/')
library(knitr)
local({
hook_plot = knit_hooks$get('plot')
knit_hooks$set(plot = function(x, options) {
paste0('\n\n----\n\n', hook_plot(x, options))
})
})
knitr::opts_chunk$set(echo = TRUE, tidy = TRUE)
library(readr)
library(rstan)
library(dplyr)
library(ggplot2)
library(bayesplot)
library(lubridate)
df<-read_csv("data/central_colombia.csv")
ggplot(df, aes(x = date, y = n)) +
geom_line(aes(linetype = "New daily cases")) +
geom_point(color = "black") +
facet_wrap(~dep, scales = "free_y", ncol = 4, labeller = label_both) +
scale_y_continuous(name = "", limits = range(df$n)) +
scale_linetype_discrete(name = "")
data<-read_csv("data/central_colombia_relevant.csv")
data<-data[order(data$dep),]
data<-data[,c(1,5,2,3,4)]
model.Poisson<-stan_model("stan/poisson_regression.stan")
#arrange things
model.data<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time
)
#str(model.Poisson.data)
#run the model
fit.model.Poisson<-sampling(model.Poisson, data=model.data)
#inferred parameters
print(fit.model.Poisson, pars=c("alpha", "beta"))
theme_set(bayesplot::theme_default())
mcmc_scatter(as.matrix(fit.model.Poisson, pars=c("alpha", "beta") ), alpha=0.2)
y_rep<-as.matrix(fit.model.Poisson, pars="y_rep")
ppc_dens_overlay(y = model.data$cases, y_rep[1:200,])
#in this way we check the standardized residuals
mean_y_rep<-colMeans(y_rep)
std_residual<-(model.data$cases - mean_y_rep) / sqrt(mean_y_rep)
qplot(mean_y_rep, std_residual) + hline_at(2) + hline_at(-2)
#posterior predictive chiecking
samples_NB<-rstan::extract(fit.model.NB)
#compile
model.NB<-stan_model("stan/negative_binomial.stan")
#fit
fit.model.NB<-sampling(model.NB, data=model.data)
#inferred parameters
print(fit.model.NB, pars=c("alpha", "beta"))
#posterior predictive chiecking
samples_NB<-rstan::extract(fit.model.NB)
y_rep<-samples_NB$y_rep
ppc_dens_overlay(y = model.data$cases, y_rep[1:200,])
mean_inv_phi<-mean(samples_NB$inv_phi)
mean_y_rep<-colMeans(y_rep)
std_residual<-(model.data$cases - mean_y_rep) / sqrt(mean_y_rep + mean_y_rep^2*mean_inv_phi)
qplot(mean_y_rep, std_residual) + hline_at(2) + hline_at(-2)
ppc_stat_grouped(
y = model.data$cases,
yrep = y_rep,
group = data$dep,
stat = "mean",
binwidth = 0.2
)
data
ppc_intervals(
y = data$n,
yrep = y_rep,
x = data$elapsed_time
) +
labs(x = "Number of traps", y = "Number of complaints")
ppc_intervals(
y = data$n,
yrep = y_rep,
x = data$elapsed_time
) +
labs(x = "Days", y = "Cases")
data <- data %>%
mutate(dep_idx = factor(dep, levels=unique(dep)),
dep_id = as.integer(dep_idx)) %>%
select(-dep_idx)
data<-data[,c(1,2,3,6,4,5)]
data
data$people<-rep(0, nrow(data))
data
data[which(data$dep_id==1),]
data[which(data$dep_id==1),]$people<-6.4
data
data[which(data$dep_id==2),]$people<-7.4
data
data[which(data$dep_id==1),]$people<-6.4
data[which(data$dep_id==2),]$people<-7.4
data[which(data$dep_id==3),]$people<-2.9
data[which(data$dep_id==4),]$people<-0.94
data[which(data$dep_id==5),]$people<-4.4
cc<-read_csv("colombia_covid.csv")
cc<-read_csv("data/colombia_covid.csv")
cc
cc<-read_csv("data/central.csv")
cc<-read_csv("data/central_colombiacsv")
cc<-read_csv("data/central_colombia.csv")
cc
cc<-read_csv("data/colombia_covid.csv")
cc
install.packages(c("fastDummies", "geojsonio", "ggrepel", "ggthemes", "leaflet", "naniar"))
central.colombia.dep<-c("Bogotá D.C.", "Cundinamarca",  "Valle del Cauca", "Risaralda", "Antioquia")
central.colombia.dep<-c("Bogotá D.C.", "Cundinamarca",  "Valle del Cauca", "Risaralda", "Antioquia")
central.colombia.rows<-which(colombia_covid$`Departamento o Distrito` %in% central.c
central.colombia.dep<-c("Bogotá D.C.", "Cundinamarca",  "Valle del Cauca", "Risaralda", "Antioquia")
central.colombia.dep<-c("Bogotá D.C.", "Cundinamarca",  "Valle del Cauca", "Risaralda", "Antioquia")
central.colombia.rows<-which(cc$`Departamento o Distrito` %in% central.colombia.dep)
cc<-cc[central.colombia.rows,]
cc
cc %>%
group_by(`Fecha de diagnóstico`,`Departamento o Distrito`) %>%
count()
cc<-cc[central.colombia.rows,]
cc
which(cc$`Departamento o Distrito`=="Bogotá D.C.")
cc[which(cc$`Departamento o Distrito`=="Bogotá D.C."),]
cc[which(cc$`Departamento o Distrito`=="Bogotá D.C."),] %>%
group_by(`Fecha de diagnóstico`)
cc[which(cc$`Departamento o Distrito`=="Bogotá D.C."),] %>%
group_by(`Fecha de diagnóstico`) %>%
aggregate(Edad, mean)
cc[which(cc$`Departamento o Distrito`=="Bogotá D.C."),] %>%
group_by(`Fecha de diagnóstico`) %>%
aggregate(cc$Edad, mean)
cc[which(cc$`Departamento o Distrito`=="Bogotá D.C."),] %>%
group_by(`Fecha de diagnóstico`) %>%
aggregate(list(cc$Edad), mean)
cc[which(cc$`Departamento o Distrito`=="Bogotá D.C."),] %>%
group_by(`Fecha de diagnóstico`) %>%
aggregate(cc$Edad, list(cc$`Fecha de diagnóstico`), mean)
cc[which(cc$`Departamento o Distrito`=="Bogotá D.C."),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
bogota_mean_age<-cc[which(cc$`Departamento o Distrito`=="Bogotá D.C."),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
bogota_mean_age<-cc[which(cc$`Departamento o Distrito`=="Bogotá D.C."),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
cundinamarca_mean_age<-cc[which(cc$`Departamento o Distrito`=="Cundinamarca"),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
valle_cauca_mean_age<-cc[which(cc$`Departamento o Distrito`=="Valle del Cauca"),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
risaralda_mean_age<-cc[which(cc$`Departamento o Distrito`=="Risaralda"),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
antioquia_mean_age<-cc[which(cc$`Departamento o Distrito`=="Antioquia"),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
bogota_mean_age
data$age<-rep(0,nrows(data))
data$age<-rep(0,nrow(data))
data
data[which(data$dep_id==1),]$age<-antioquia_mean_age
data[which(data$dep_id==1),]$age<-as.vector(antioquia_mean_age)
antioquia_mean_age
antioquia_mean_age[2]
data[which(data$dep_id==1),]$age<-as.vector(antioquia_mean_age[2])
data[which(data$dep_id==1),]$age<-as.vector(antioquia_mean_age[,2])
as.vector(antioquia_mean_age[2])
c(as.vector(antioquia_mean_age[2]))
data[which(data$dep_id==1),]$age<-c(as.vector(antioquia_mean_age[,2]))
c(as.vector(antioquia_mean_age[2]))
data$age<-rep(0,nrow(data))
data
c(as.numeric(antioquia_mean_age[2]))
c(as.numeric(antioquia_mean_age[2]))
antioquia_mean_age
antioquia_mean_age[2]
as.numeric(c(antioquia_mean_age[2]))
as.vector(c(antioquia_mean_age[2]))
as.vector(c(antioquia_mean_age[2]))[1]
as.vector(c(antioquia_mean_age[2]))[1]
as.vector(c(antioquia_mean_age[2]))[0]
as.vector(c(antioquia_mean_age[2]))[,1]
as.vector(c(antioquia_mean_age[2]))[1,]
as.vector(c(antioquia_mean_age[2]))[0]
unlist(c(antioquia_mean_age[2]))[0]
unlist(c(antioquia_mean_age[2]))
unlist(c(antioquia_mean_age[2]))[1]
unlist(c(antioquia_mean_age[2]))[,1]
unlist(c(antioquia_mean_age[2]))[0]
unlist(c(antioquia_mean_age[2]))
unname(unlist(c(antioquia_mean_age[2])))
data[which(data$dep_id==1),]$age<-unname(unlist(c(antioquia_mean_age[2])))
data[which(data$dep_id==2),]$age<-unname(unlist(c(bogota_mean_age[2])))
data[which(data$dep_id==3),]$age<-unname(unlist(c(cundinamarca_mean_age[2])))
data[which(data$dep_id==4),]$age<-unname(unlist(c(risaralda_mean_age[2])))
data[which(data$dep_id==5),]$age<-unname(unlist(c(valle_cauca_mean_age[2])))
data
data[which(data$dep_id==2),]$age<-unname(unlist(c(bogota_mean_age[2])))
bogota_mean_age<-cc[which(cc$`Departamento o Distrito`=="Bogotá D.C."),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
bogota_mean_age
data
cc
cc<-read_csv("data/colombia_covid.csv")
cc
tail(cc)
central.colombia.dep<-c("Bogotá D.C.", "Cundinamarca",  "Valle del Cauca", "Risaralda", "Antioquia")
central.colombia.rows<-which(cc$`Departamento o Distrito` %in% central.colombia.dep)
cc<-cc[central.colombia.rows,]
cc
bogota_mean_age<-cc[which(cc$`Departamento o Distrito`=="Bogotá D.C."),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
bogota_mean_age
cundinamarca_mean_age<-cc[which(cc$`Departamento o Distrito`=="Cundinamarca"),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
valle_cauca_mean_age<-cc[which(cc$`Departamento o Distrito`=="Valle del Cauca"),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
risaralda_mean_age<-cc[which(cc$`Departamento o Distrito`=="Risaralda"),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
antioquia_mean_age<-cc[which(cc$`Departamento o Distrito`=="Antioquia"),] %>%
group_by(`Fecha de diagnóstico`) %>%
summarise_at(vars(Edad), funs(mean(.,na.rm=TRUE)))
data$age<-rep(0,nrow(data))
data[which(data$dep_id==1),]$age<-unname(unlist(c(antioquia_mean_age[2])))
data[which(data$dep_id==2),]$age<-unname(unlist(c(bogota_mean_age[2])))
data[which(data$dep_id==3),]$age<-unname(unlist(c(cundinamarca_mean_age[2])))
data[which(data$dep_id==4),]$age<-unname(unlist(c(risaralda_mean_age[2])))
data[which(data$dep_id==5),]$age<-unname(unlist(c(valle_cauca_mean_age[2])))
data
data$sex<-rep(0, nrow(data))
model2.NB<-stan_model("stan/NB_model2.stan")
model2.NB<-stan_model("stan/NB_model2.stan")
model2.NB<-stan_model("stan/NB_model2.stan")
model2.NB<-stan_model("stan/NB_model2.stan")
model2.NB<-stan_model("stan/NB_model2.stan")
#arrange things
model.data2<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time,
age = data$age,
log_people = log(data$people),
D = 5,
dep = data$dep_id,
id = data$dep_id
)
#fit
fit.model2.NB<-sampling(model2.NB, model.data2)
#arrange things
model.data2<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time,
age = data$age,
log_people = log(data$people/1e4),
D = 5,
dep = data$dep_id,
id = data$dep_id
)
#fit
fit.model2.NB<-sampling(model2.NB, model.data2)
log(data$people/1e4)
log(data$people)
data$people
data$people*10^6
log(data$people*10^6)
#arrange things
model.data2<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time,
age = data$age,
log_people = log(data$people*10^6),
D = 5,
dep = data$dep_id,
id = data$dep_id
)
#fit
fit.model2.NB<-sampling(model2.NB, model.data2)
#fit
fit.model2.NB<-sampling(model2.NB, model.data2)
#fit
fit.model2.NB<-sampling(model2.NB, model.data2)
model2.NB<-stan_model("stan/NB_model2.stan")
model2.NB<-stan_model("stan/NB_model2.stan")
#arrange things
model.data2<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time,
age = data$age,
log_people = log(data$people*10^6),
#D = 5,
#dep = data$dep_id,
#id = data$dep_id
)
#arrange things
model.data2<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time,
age = data$age,
log_people = log(data$people*10^6)
#D = 5,
#dep = data$dep_id,
#id = data$dep_id
)
#fit
fit.model2.NB<-sampling(model2.NB, model.data2)
#posterior predictive chiecking
samples_NB2<-rstan::extract(fit.model2.NB)
y_rep<-samples_NB2$y_rep
ppc_dens_overlay(y = model.data2$cases, y_rep[1:200,])
#posterior predictive chiecking
samples_NB2<-rstan::extract(fit.model2.NB)
y_rep<-samples_NB2$y_rep
y_rep
ppc_dens_overlay(y = model.data2$cases, y_rep[1:200,])
#arrange things
model.data2<-list(
N = nrow(data),
cases = data$n,
time = data$elapsed_time,
age = data$age,
log_people = log(data$people*10)
#D = 5,
#dep = data$dep_id,
#id = data$dep_id
)
#fit
fit.model2.NB<-sampling(model2.NB, model.data2)
#posterior predictive chiecking
samples_NB2<-rstan::extract(fit.model2.NB)
y_rep<-samples_NB2$y_rep
y_rep
ppc_dens_overlay(y = model.data2$cases, y_rep[1:200,])
ppc_dens_overlay(y = model.data2$cases, y_rep[1:200,])
#ppc_dens_overlay(y = model.data2$cases, y_rep[1:200,])
ppc_stat_grouped(
y = model.data$cases,
yrep = y_rep,
group = data$dep,
stat = "mean",
binwidth = 0.2
)
ppc_intervals(
y = data$n,
yrep = y_rep,
x = data$elapsed_time
) +
labs(x = "Days", y = "Cases")
