y_new
y_new<-c(1,SIR.data[2:nrow(SIR.data),2] - SIR.data[1:nrow(SIR.data)-1,2])
y_new<-as.vector(y_new)
#c(1,y_new)
y_new
y_new<-c(1,SIR.data[2:nrow(SIR.data),2] - SIR.data[1:nrow(SIR.data)-1,2])
SIR.data$y_new<-y_new
y_new
y_new<-rbind(1,SIR.data[2:nrow(SIR.data),2] - SIR.data[1:nrow(SIR.data)-1,2])
y_new
SIR.data$y_new<-y_new
SIR.data
y_new<-rbind(1,SIR.data[2:nrow(SIR.data),2] - SIR.data[1:nrow(SIR.data)-1,2])
SIR.data$y_new<-as.vector(y_new)
SIR.data
SIR.data$y_new<-as.numeric(y_new)
y_new<-SIR.data[2:nrow(SIR.data),2] - SIR.data[1:nrow(SIR.data)-1,2]
y_new
y_new<-c(1,SIR.data[2:nrow(SIR.data),2] - SIR.data[1:nrow(SIR.data)-1,2])
y_new
y_new<-rbind(1,SIR.data[2:nrow(SIR.data),2] - SIR.data[1:nrow(SIR.data)-1,2])
y_new
SIR.data$y_new<-cbind(SIR.data, y_new)
SIR.data
y_new<-c(1,SIR.data[2:nrow(SIR.data),2] - SIR.data[1:nrow(SIR.data)-1,2])
y_new
as.vector(SIR.data$y)
y_new<-c(1,as.vector(SIR.data[2:nrow(SIR.data),2] - SIR.data[1:nrow(SIR.data)-1,2]))
y_new
as.vector(SIR.data$y)
y_new<-c(1,as.vector(SIR.data[2:nrow(SIR.data),2]) - as.vectr(SIR.data[1:nrow(SIR.data)-1,2]))
y_new<-c(1,as.vector(SIR.data[2:nrow(SIR.data),2]) - as.vector(SIR.data[1:nrow(SIR.data)-1,2]))
y_new
y_new<-as.vector(SIR.data[2:nrow(SIR.data),2]) - as.vector(SIR.data[1:nrow(SIR.data)-1,2])
y_new
y_new<-as.vector(as.vector(SIR.data[2:nrow(SIR.data),2]) - as.vector(SIR.data[1:nrow(SIR.data)-1,2]))
y_new
as.vector(SIR.data$y[2:nrow(SIR.data)])
y_new<-as.vector(SIR.data$y[2:nrow(SIR.data)])-as.vector(SIR.data$y[1:nrow(SIR.data)-1])
y_new
y_new<-c(1,as.vector(SIR.data$y[2:nrow(SIR.data)])-as.vector(SIR.data$y[1:nrow(SIR.data)-1]))
y_new
SIR.data$y_new<-y_new
SIR.data
SIR.data<-SIR.data[,c(1,2,6,3,4,5)]
head(SIR.data)
pred<-cbind(as.data.frame(summary(fit.model, pars="cases", probs = c(0.05, 0.5, 0.95))$summary), t, cases)
fit.model
ggplot(yhat, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill = "red", alpha = 0.3) +
geom_line(mapping = aes(x = t, y = X50.)) +
labs(x="Days after first case", y="Number of infected people")
pred<-cbind(as.data.frame(summary(fit.model, pars="pred_cases", probs = c(0.05, 0.5, 0.95))$summary), t, cases)
pred<-cbind(as.data.frame(summary(fit.model, pars="pred_cases", probs = c(0.05, 0.5, 0.95))$summary), t, cases)
colnames(pred)<-make.names(colnames(pred))
#compile the model
Sir.model2<-stan_model("stan/SIR2.stan")
#compile the model
Sir.model2<-stan_model("stan/SIR2.stan")
knitr::opts_chunk$set(fig.align = 'center', warning=FALSE, message=FALSE, fig.asp=0.625, dev='png', global.par = TRUE, dev.args=list(pointsize=10), fig.path = 'figs/')
library(knitr)
local({
hook_plot = knit_hooks$get('plot')
knit_hooks$set(plot = function(x, options) {
paste0('\n\n----\n\n', hook_plot(x, options))
})
})
knitr::opts_chunk$set(echo = TRUE, tidy = TRUE)
library(readr)
library(rstan)
library(dplyr)
library(ggplot2)
library(bayesplot)
library(lubridate)
data<-read_csv("data/SIR_data.csv")
data<- data %>% select(-X1)
data<-data[,c(1,3,2)]
missing.data<-read_csv("data/dead_recovered.csv")
missing.data<-missing.data %>% select(-"confirmed")
missing.data<-missing.data %>% select(-"confirmed_daily")
missing.data<-missing.data[-1,]
missing.data<-missing.data[-c(2,3,5),]
deaths<-missing.data$deaths
recovered<-missing.data$recovered
data$`cumulative_deaths`<-deaths
data$`cumulative_recoveries`<-recovered
#pop in millions
bogotÃ _pop<-7.4
antioquia_pop<-6.4
cundimarca_pop<-2.9
caldas_pop<-0.99
valle_cauca_pop<-4.4
meta_pop<-1
risaralda_pop<-0.94
santander_pop<-2.1
quindio_pop<-0.53
tolima_pop<-1.3
cauca_pop<-1.4
casanare_pop<-0.42
boyaca_pop<-1.2
tot_pop<-N<-7.4+6.4+2.9+0.99+4.4+1+0.94+2.1+0.53+1.3+1.4+0.42+1.2
N<-N*10^6 #from millions to individuals
All<-as.vector(rep(N,25))
data$S<-All-data$y
data$I<-data$y-data$cumulative_deaths-data$cumulative_recoveries
data$R<-data$cumulative_deaths+data$cumulative_recoveries
SIR.data<-data[,c(2,3,6,7,8)]
y_new<-c(1,as.vector(SIR.data$y[2:nrow(SIR.data)])-as.vector(SIR.data$y[1:nrow(SIR.data)-1]))
SIR.data$y_new<-y_new
SIR.data<-SIR.data[,c(1,2,6,3,4,5)]
head(SIR.data)
cases<-SIR.data$y
n_days<-length(cases)
t<-seq(0, n_days, by=1)
#I.C. for the ODEs
t0<-0
t<-t[-1]
i0<-1
s0<-N-i0
r0<-0
y0 = c(S=s0, I=i0, R=r0)
Sir.data<-list(n_days = n_days,
y0 = y0,
t0 = t0,
ts = t,
N = N,
cases = cases)
#compile the model
Sir.model<-stan_model("stan/SIR.stan")
#run the model
fit.model<-sampling(Sir.model, data=Sir.data)
pars<-c("beta", "gamma", "R0", "recovery_time")
print(fit.model, pars=pars)
stan_dens(fit.model, pars=pars, separate_chains=TRUE)
pred<-cbind(as.data.frame(summary(fit.model, pars="pred_cases", probs = c(0.05, 0.5, 0.95))$summary), t, cases)
colnames(pred)<-make.names(colnames(pred))
#number of infected for each day
params <- lapply(t, function(i){sprintf("y[%s,2]", i)})
yhat <- as.data.frame(summary(fit.model,
pars = params, probs = c(0.05, 0.5, 0.95))$summary)
colnames(yhat) <- make.names(colnames(yhat))
ggplot(yhat, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill = "red", alpha = 0.3) +
geom_line(mapping = aes(x = t, y = X50.)) +
labs(x="Days after first case", y="Number of infected people")
#compile the model
Sir.model2<-stan_model("stan/SIR2.stan")
#compile the model
Sir.model2<-stan_model("stan/SIR2.stan")
#compile the model
Sir.model2<-stan_model("stan/SIR2.stan")
#compile the model
Sir.model2<-stan_model("stan/SIR2.stan")
Sir2.data<-list(n_days = n_days,
y0 = y0,
t0 = t0,
ts = t,
N = N,
cases = SIR.data$y_new)
#compile the model
Sir.model2<-stan_model("stan/SIR2.stan")
#compile the model
Sir.model2<-stan_model("stan/SIR2.stan")
Sir2.data<-list(n_days = n_days,
y0 = y0,
t0 = t0,
ts = t,
N = N,
cases = SIR.data$y_new)
#run the model
fit.model2<-sampling(Sir.model2, data=Sir2.data)
#compile the model
Sir.model2<-stan_model("stan/SIR2.stan")
Sir2.data<-list(n_days = n_days,
y0 = y0,
t0 = t0,
ts = t,
N = N,
cases = SIR.data$y_new)
#run the model
fit.model2<-sampling(Sir.model2, data=Sir2.data)
#compile the model
Sir.model2<-stan_model("stan/SIR2.stan")
Sir2.data<-list(n_days = n_days,
y0 = y0,
t0 = t0,
ts = t,
N = N,
cases = SIR.data$y_new)
#run the model
fit.model2<-sampling(Sir.model2, data=Sir2.data)
pars<-c("beta", "gamma", "R0", "recovery_time")
print(fit.model2, pars=pars)
stan_dens(fit.model2, pars=pars, separate_chains=TRUE)
#prediction check
pred<-cbind(as.data.frame(summary(fit.model2, pars="pred_cases", probs = c(0.05, 0.5, 0.95))$summary), t, cases)
#prediction check
pred2<-cbind(as.data.frame(summary(fit.model2, pars="pred_cases", probs = c(0.05, 0.5, 0.95))$summary), t, cases)
colnames(pred2)<-make.names(colnames(pred2))
#number of infected for each day
params <- lapply(t, function(i){sprintf("y[%s,2]", i)})
yhat2 <- as.data.frame(summary(fit.model2,
pars = params, probs = c(0.05, 0.5, 0.95))$summary)
colnames(yhat2) <- make.names(colnames(yhat2))
ggplot(yhat2, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill = "red", alpha = 0.3) +
geom_line(mapping = aes(x = t, y = X50.)) +
labs(x="Days after first case", y="Number of infected people")
y_rep <- as.matrix(fit.model2, pars = "pred_cases")
ppc_dens_overlay(
y = SIR.data$y_new,
yrep = y_rep[1:200,]
)
fit2 <- extract(fit.model2)
mean(apply(fit2$incidence, 2, median) == SIR.data$y_new)
y_rep <- as.matrix(fit.model2, pars = "incidence")
ppc_dens_overlay(
y = SIR.data$y_new,
yrep = y_rep[1:200,]
)
#compile the model
Sir.model2<-stan_model("stan/SIR2.stan")
Sir2.data<-list(n_days = n_days,
y0 = y0,
t0 = t0,
ts = t,
N = N,
cases = SIR.data$y_new)
#run the model
fit.model2<-sampling(Sir.model2, data=Sir2.data)
pars<-c("beta", "gamma", "R0", "recovery_time")
print(fit.model2, pars=pars)
#prediction check
pred2<-cbind(as.data.frame(summary(fit.model2, pars="pred_cases", probs = c(0.05, 0.5, 0.95))$summary), t, cases)
stan_dens(fit.model2, pars=pars, separate_chains=TRUE)
pred2<-cbind(as.data.frame(summary(fit.model2, pars="pred_cases", probs = c(0.05, 0.5, 0.95))$summary), t, cases)
colnames(pred2)<-make.names(colnames(pred2))
#number of infected for each day
params <- lapply(t, function(i){sprintf("y[%s,2]", i)})
yhat2 <- as.data.frame(summary(fit.model2,
pars = params, probs = c(0.05, 0.5, 0.95))$summary)
colnames(yhat2) <- make.names(colnames(yhat2))
ggplot(yhat2, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill = "red", alpha = 0.3) +
geom_line(mapping = aes(x = t, y = X50.)) +
labs(x="Days after first case", y="Number of infected people")
y_rep <- as.matrix(fit.model2, pars = "incidence")
ppc_dens_overlay(
y = SIR.data$y_new,
yrep = y_rep[1:200,]
)
fit2 <- extract(fit.model2)
mean(apply(fit2$incidence, 2, median) == SIR.data$y_new)
fit2$
mean(fit2$incidence-SIR.data$y_new)
fit2$incidence
apply(fit2$incidence, 2, median)
mean(apply(fit2$incidence, 2, median) - SIR.data$y_new)
apply(fit2$incidence, 2, median)
y_new
View(fit2)
apply(fit2$incidence, 2, median)
y_new
apply(fit2$incidence, 2, median)
apply(fit2$incidence, 2)
fit2$incidence
apply(fit2$incidence, 2, mean)
y_new
apply(fit2$incidence, 2, mean)
y_new
length((apply(fit2$incidence, 2, median) - SIR.data$y_new)<10)
length((apply(fit2$incidence, 2, median) - SIR.data$y_new)<5)
apply(fit2$incidence, 2, mean) - SIR.data$y_new
length(abs((apply(fit2$incidence, 2, median) - SIR.data$y_new))<10 == TRUE)
abs((apply(fit2$incidence, 2, median) - SIR.data$y_new))<10
abs((apply(fit2$incidence, 2, median) - SIR.data$y_new))<10 == TRUE
abs((apply(fit2$incidence, 2, median) - SIR.data$y_new))<10 = TRUE
abs((apply(fit2$incidence, 2, median) - SIR.data$y_new))<10 == "TRUE"
abs((apply(fit2$incidence, 2, median) - SIR.data$y_new))<10 = "TRUE"
abs((apply(fit2$incidence, 2, median) - SIR.data$y_new))<10
which(abs((apply(fit2$incidence, 2, median) - SIR.data$y_new))<10==1)
abs((apply(fit2$incidence, 2, mean) - SIR.data$y_new))<10
abs((apply(fit2$incidence, 2, mean) - SIR.data$y_new))<20
prop<-as.vector(abs((apply(fit2$incidence, 2, mean) - SIR.data$y_new))<20)
prop
prop<-as.data.frame(abs((apply(fit2$incidence, 2, mean) - SIR.data$y_new))<20)
prop
names(prop)<-c("accuracy")
prop
prop %>% group_by(accuracy) %>% count()
prop<-as.data.frame(abs((apply(fit2$incidence, 2, mean) - SIR.data$y_new))<30)
names(prop)<-c("accuracy")
prop %>% group_by(accuracy) %>% count()
prop<-as.data.frame(abs((apply(fit2$incidence, 2, mean) - SIR.data$y_new))<50)
names(prop)<-c("accuracy")
prop %>% group_by(accuracy) %>% count()
y_new
prop<-as.data.frame(abs((apply(fit2$incidence, 2, mean) - SIR.data$y_new))<30)
prop %>% group_by(accuracy) %>% count()
prop<-as.data.frame(abs((apply(fit2$incidence, 2, mean) - SIR.data$y_new))<30)
names(prop)<-c("accuracy")
prop %>% group_by(accuracy) %>% count()
prop<-as.data.frame(abs((apply(fit2$incidence, 2, mean) - SIR.data$y_new))<10)
names(prop)<-c("accuracy")
prop %>% group_by(accuracy) %>% count()
prop<-as.data.frame(abs((apply(fit2$incidence, 2, mean) - SIR.data$y_new))<20)
names(prop)<-c("accuracy")
prop %>% group_by(accuracy) %>% count()
prop<-as.data.frame(abs((apply(fit2$pred_cases, 2, mean) - SIR.data$y_new))<20)
names(prop)<-c("accuracy")
prop %>% group_by(accuracy) %>% count()
prop<-as.data.frame(abs((apply(fit2$pred_cases, 2, mean) - SIR.data$y_new))<10)
names(prop)<-c("accuracy")
prop %>% group_by(accuracy) %>% count()
prop<-as.data.frame(abs((apply(fit2$pred_cases, 2, mean) - SIR.data$y_new))<20)
names(prop)<-c("accuracy")
prop %>% group_by(accuracy) %>% count()
plot(SIR.data$y_new ~ SIR.data$elapsed_time)
ggplot(yhat2, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill = "red", alpha = 0.3) +
geom_line(mapping = aes(x = t, y = X50.)) +
labs(x="Days after first case", y="Number of infected people")
ggplot(yhat2, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill = "red", alpha = 0.3) +
geom_line(mapping = aes(x = t, y = X50.)) +
geom_point(aes(y= SIR.data$y_new, x = SIR.data$elapsed_time))
ggplot(yhat2, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill = "red", alpha = 0.3) +
geom_line(mapping = aes(x = t, y = X50.)) +
geom_point(aes(y= SIR.data$y_new, x = SIR.data$elapsed_time))
ppc_dens_overlay(
y = SIR.data$y_new,
yrep = y_rep[1:200,]
)
ggplot(yhat2, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill = "red", alpha = 0.3) +
geom_line(mapping = aes(x = t, y = X50.)) +
labs(x="Days after first case", y="Number of infected people")
yhat2 <- as.data.frame(summary(fit.model2,
pars = params, probs = c(0.025, 0.5, 0.975))$summary)
colnames(yhat2) <- make.names(colnames(yhat2))
ggplot(yhat2, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill = "red", alpha = 0.3) +
geom_line(mapping = aes(x = t, y = X50.)) +
labs(x="Days after first case", y="Number of infected people")
colnames(yhat2) <- make.names(colnames(yhat2))
colnames(yhat2)
ggplot(yhat2, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X2.5, ymax = X97.5), fill = "red", alpha = 0.3) +
geom_line(mapping = aes(x = t, y = X50.)) +
labs(x="Days after first case", y="Number of infected people")
colnames(yhat2)
ggplot(yhat2, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X2.5., ymax = X97.5.), fill = "red", alpha = 0.3) +
geom_line(mapping = aes(x = t, y = X50.)) +
labs(x="Days after first case", y="Number of infected people")
#compile the model
Sir.model2<-stan_model("stan/SIR2.stan")
Sir2.data<-list(n_days = n_days,
#y0 = y0,
t0 = t0,
ts = t,
N = N,
cases = SIR.data$y)
#run the model
fit.model2<-sampling(Sir.model2, data=Sir2.data)
#compile the model
Sir.model2<-stan_model("stan/SIR2.stan")
Sir2.data<-list(n_days = n_days,
#y0 = y0,
t0 = 0,
ts = SIR.data$elapsed_time,
N = N,
cases = SIR.data$y)
#run the model
fit.model2<-sampling(Sir.model2, data=Sir2.data)
#compile the model
Sir.model2<-stan_model("stan/SIR2.stan")
Sir2.data<-list(n_days = n_days,
#y0 = y0,
t0 = 0,
ts = SIR.data$elapsed_time,
N = N,
cases = SIR.data$y)
#run the model
fit.model2<-sampling(Sir.model2, data=Sir2.data)
#compile the model
Sir.model2<-stan_model("stan/SIR2.stan")
Sir2.data<-list(n_days = n_days,
#y0 = y0,
t0 = 0,
ts = SIR.data$elapsed_time,
N = N,
cases = SIR.data$y)
#run the model
fit.model2<-sampling(Sir.model2, data=Sir2.data)
Sir2.data<-list(n_days = n_days,
#y0 = y0,
t0 = 0,
ts = t,
N = N,
cases = SIR.data$y)
#run the model
fit.model2<-sampling(Sir.model2, data=Sir2.data)
#compile the model
Sir.model2<-stan_model("stan/SIR2.stan")
knitr::opts_chunk$set(fig.align = 'center', warning=FALSE, message=FALSE, fig.asp=0.625, dev='png', global.par = TRUE, dev.args=list(pointsize=10), fig.path = 'figs/')
library(knitr)
local({
hook_plot = knit_hooks$get('plot')
knit_hooks$set(plot = function(x, options) {
paste0('\n\n----\n\n', hook_plot(x, options))
})
})
knitr::opts_chunk$set(echo = TRUE, tidy = TRUE)
library(readr)
library(rstan)
library(dplyr)
library(ggplot2)
library(bayesplot)
library(lubridate)
data<-read_csv("data/SIR_data.csv")
data<- data %>% select(-X1)
data<-data[,c(1,3,2)]
missing.data<-read_csv("data/dead_recovered.csv")
missing.data<-missing.data %>% select(-"confirmed")
missing.data<-missing.data %>% select(-"confirmed_daily")
missing.data<-missing.data[-1,]
missing.data<-missing.data[-c(2,3,5),]
deaths<-missing.data$deaths
recovered<-missing.data$recovered
data$`cumulative_deaths`<-deaths
data$`cumulative_recoveries`<-recovered
#pop in millions
bogotÃ _pop<-7.4
antioquia_pop<-6.4
cundimarca_pop<-2.9
caldas_pop<-0.99
valle_cauca_pop<-4.4
meta_pop<-1
risaralda_pop<-0.94
santander_pop<-2.1
quindio_pop<-0.53
tolima_pop<-1.3
cauca_pop<-1.4
casanare_pop<-0.42
boyaca_pop<-1.2
tot_pop<-N<-7.4+6.4+2.9+0.99+4.4+1+0.94+2.1+0.53+1.3+1.4+0.42+1.2
N<-N*10^6 #from millions to individuals
All<-as.vector(rep(N,25))
data$S<-All-data$y
data$I<-data$y-data$cumulative_deaths-data$cumulative_recoveries
data$R<-data$cumulative_deaths+data$cumulative_recoveries
SIR.data<-data[,c(2,3,6,7,8)]
y_new<-c(1,as.vector(SIR.data$y[2:nrow(SIR.data)])-as.vector(SIR.data$y[1:nrow(SIR.data)-1]))
SIR.data$y_new<-y_new
SIR.data<-SIR.data[,c(1,2,6,3,4,5)]
head(SIR.data)
cases<-SIR.data$y
n_days<-length(cases)
t<-seq(0, n_days, by=1)
#I.C. for the ODEs
t0<-0
t<-t[-1]
i0<-1
s0<-N-i0
r0<-0
y0 = c(S=s0, I=i0, R=r0)
Sir.data<-list(n_days = n_days,
y0 = y0,
t0 = t0,
ts = t,
N = N,
cases = cases)
#compile the model
Sir.model<-stan_model("stan/SIR.stan")
#run the model
fit.model<-sampling(Sir.model, data=Sir.data)
pars<-c("beta", "gamma", "R0", "recovery_time")
print(fit.model, pars=pars)
stan_dens(fit.model, pars=pars, separate_chains=TRUE)
pred<-cbind(as.data.frame(summary(fit.model, pars="pred_cases", probs = c(0.05, 0.5, 0.95))$summary), t, cases)
colnames(pred)<-make.names(colnames(pred))
#number of infected for each day
params <- lapply(t, function(i){sprintf("y[%s,2]", i)})
yhat <- as.data.frame(summary(fit.model,
pars = params, probs = c(0.05, 0.5, 0.95))$summary)
colnames(yhat) <- make.names(colnames(yhat))
ggplot(yhat, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill = "red", alpha = 0.3) +
geom_line(mapping = aes(x = t, y = X50.)) +
labs(x="Days after first case", y="Number of infected people")
#compile the model
Sir.model2<-stan_model("stan/SIR2.stan")
Sir2.data<-list(n_days = n_days,
#y0 = y0,
t0 = 0,
ts = t,
N = N,
cases = SIR.data$y)
#run the model
fit.model2<-sampling(Sir.model2, data=Sir2.data)
#compile the model
Sir.model2<-stan_model("stan/SIR2.stan")
Sir2.data<-list(n_days = n_days,
#y0 = y0,
t0 = 0,
ts = SIR.data$elapsed_time,
N = N,
cases = SIR.data$y)
#run the model
fit.model2<-sampling(Sir.model2, data=Sir2.data)
